package displaytweets;

import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Array;
import java.util.ArrayList;

import org.apache.lucene.queryparser.classic.ParseException;

import query.SimpleQueryHolder;
import searchers.EmbeddedSearcher;

import twitter4j.Status;
import twitter4j.TwitterException;
import twitter4j.TwitterObjectFactory;

import UnicodeConverter.UnicodeConverter;
import java.util.Arrays;

/**
 *
 * @author Kenan
 * 	   Roshan - Implementation of Query creation and execution
 */
public class SearchGUI extends javax.swing.JFrame {

    // an SimpleQueryHolder class object that will store and format the query that will be used for searching	
	SimpleQueryHolder simpleQueryObject = new SimpleQueryHolder();
    /**
     * Creates new form SearchGUI
     */
    public SearchGUI() {
        initComponents();
        initEmojiButtons();
        // Results Variables
        pageLen = 10;
        pageNum = 0; // first page  
    }
    public SearchGUI(int pL) {
        initComponents();
        initEmojiButtons();
        // Results Variables
        pageLen = pL;
        pageNum = 0; // first page
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchPanel = new javax.swing.JPanel();
        searchScrollPane = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        incKeywords = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        keywordLabel = new javax.swing.JLabel();
        minTotalScore = new javax.swing.JTextField();
        TotalSentimentLabel = new javax.swing.JLabel();
        maxTotalScore = new javax.swing.JTextField();
        toLabel = new javax.swing.JLabel();
        advToggle = new javax.swing.JToggleButton();
        advSearchPanel = new javax.swing.JPanel();
        excKeywordLabel = new javax.swing.JLabel();
        excKeywords = new javax.swing.JTextField();
        emojiSentimentLabel = new javax.swing.JLabel();
        toLabel3 = new javax.swing.JLabel();
        minEmojiScore = new javax.swing.JTextField();
        maxEmojiScore = new javax.swing.JTextField();
        minTextScore = new javax.swing.JTextField();
        textSentimentLabel = new javax.swing.JLabel();
        maxTextScore = new javax.swing.JTextField();
        toLabel2 = new javax.swing.JLabel();
        hashtagLabel = new javax.swing.JLabel();
        hashtags = new javax.swing.JTextField();
        noResultsLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        emojiScrollPane = new javax.swing.JScrollPane();
        emojiPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        resultPanel = new javax.swing.JPanel();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultPane = new javax.swing.JPanel();
        previousButton = new javax.swing.JButton();
        goButton = new javax.swing.JButton();
        pageSelect = new javax.swing.JComboBox<>();
        nextButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tweetPanel = new javax.swing.JPanel();
        backToSearch = new javax.swing.JButton();
        clearFiltersButton = new javax.swing.JButton();
        pieChartButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        searchButton.setText("Search");
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    searchButtonMouseClicked(evt);
                } catch (ParseException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        });

        keywordLabel.setText("Keyword");

        TotalSentimentLabel.setText("Total Sentiment Score");
        TotalSentimentLabel.setToolTipText("To display only one score, fill only one box");

        toLabel.setText("to");

        advToggle.setText("Advanced Search");
        advToggle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                advToggleMouseClicked(evt);
            }
        });

        advSearchPanel.setPreferredSize(new java.awt.Dimension(345, 0));

        excKeywordLabel.setText("Keyword (Exclude)");

        emojiSentimentLabel.setText("Emoji Sentiment Score");
        emojiSentimentLabel.setToolTipText("To display only one score, fill only one box");

        toLabel3.setText("to");

        textSentimentLabel.setText("Text Sentiment Score");
        textSentimentLabel.setToolTipText("To display only one score, fill only one box");

        toLabel2.setText("to");

        javax.swing.GroupLayout advSearchPanelLayout = new javax.swing.GroupLayout(advSearchPanel);
        advSearchPanel.setLayout(advSearchPanelLayout);
        advSearchPanelLayout.setHorizontalGroup(
            advSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advSearchPanelLayout.createSequentialGroup()
                .addGroup(advSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(excKeywordLabel)
                    .addComponent(textSentimentLabel)
                    .addComponent(emojiSentimentLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(advSearchPanelLayout.createSequentialGroup()
                        .addComponent(minEmojiScore, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxEmojiScore, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(advSearchPanelLayout.createSequentialGroup()
                        .addComponent(minTextScore, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxTextScore, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(excKeywords, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        advSearchPanelLayout.setVerticalGroup(
            advSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advSearchPanelLayout.createSequentialGroup()
                .addGroup(advSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(excKeywordLabel)
                    .addComponent(excKeywords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(advSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textSentimentLabel)
                    .addComponent(minTextScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel2)
                    .addComponent(maxTextScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(advSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emojiSentimentLabel)
                    .addComponent(minEmojiScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel3)
                    .addComponent(maxEmojiScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        hashtagLabel.setText("Hashtags");

        noResultsLabel.setForeground(new java.awt.Color(255, 0, 0));
        noResultsLabel.setText("No Results!");
        noResultsLabel.setVisible(false);

        errorLabel.setForeground(new java.awt.Color(255, 51, 51));
        errorLabel.setText("Invalid Input!");
        errorLabel.setVisible(false);

        emojiPanel.setBackground(new java.awt.Color(255, 255, 255));
        emojiPanel.setLayout(new java.awt.GridBagLayout());
        emojiScrollPane.setViewportView(emojiPanel);

        jLabel1.setText("Search by Emoji");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(noResultsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errorLabel))
                    .addComponent(advSearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(advToggle)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(TotalSentimentLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(minTotalScore, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxTotalScore, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hashtagLabel)
                            .addComponent(keywordLabel))
                        .addGap(90, 90, 90)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(incKeywords, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hashtags, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(emojiScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(hashtagLabel))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(hashtags, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keywordLabel)
                            .addComponent(incKeywords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TotalSentimentLabel)
                            .addComponent(minTotalScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toLabel)
                            .addComponent(maxTotalScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(advToggle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(advSearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(searchButton)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(noResultsLabel)
                                .addComponent(errorLabel))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel1)
                        .addGap(11, 11, 11)
                        .addComponent(emojiScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        searchScrollPane.setViewportView(jPanel2);

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchScrollPane)
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addComponent(searchScrollPane)
                .addGap(0, 0, 0))
        );

        getContentPane().add(searchPanel, "searchCard");

        previousButton.setText("Previous Page");
        previousButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                previousButtonMouseClicked(evt);
            }
        });

        goButton.setText("Go");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next Page");
        nextButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextButtonMouseClicked(evt);
            }
        });

        tweetPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tweetPanel.setLayout(new javax.swing.BoxLayout(tweetPanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(tweetPanel);

        backToSearch.setText("Back to Search");
        backToSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backToSearchMouseClicked(evt);
            }
        });

        clearFiltersButton.setText("Clear Filters");
        clearFiltersButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearFiltersButtonMouseClicked(evt);
            }
        });

        pieChartButton.setText(" Pie Chart");
        pieChartButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pieChartButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout resultPaneLayout = new javax.swing.GroupLayout(resultPane);
        resultPane.setLayout(resultPaneLayout);
        resultPaneLayout.setHorizontalGroup(
            resultPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resultPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(resultPaneLayout.createSequentialGroup()
                        .addComponent(previousButton)
                        .addGap(18, 18, 18)
                        .addComponent(pageSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(goButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(backToSearch)
                        .addGap(18, 18, 18)
                        .addComponent(nextButton))
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(resultPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pieChartButton)
                    .addComponent(clearFiltersButton))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        resultPaneLayout.setVerticalGroup(
            resultPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resultPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                    .addGroup(resultPaneLayout.createSequentialGroup()
                        .addComponent(pieChartButton)
                        .addGap(18, 18, 18)
                        .addComponent(clearFiltersButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(resultPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousButton)
                    .addComponent(goButton)
                    .addComponent(pageSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextButton)
                    .addComponent(backToSearch))
                .addContainerGap())
        );

        resultsScrollPane.setViewportView(resultPane);

        javax.swing.GroupLayout resultPanelLayout = new javax.swing.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 631, Short.MAX_VALUE)
            .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(resultsScrollPane, javax.swing.GroupLayout.Alignment.TRAILING))
        );
        resultPanelLayout.setVerticalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 344, Short.MAX_VALUE)
            .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(resultsScrollPane, javax.swing.GroupLayout.Alignment.TRAILING))
        );

        getContentPane().add(resultPanel, "card4");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Create the Emoji Menu
    private void initEmojiButtons() {
        buttonList = new ArrayList<>();
        File[] emojiList = new File("./Pics").listFiles();
        int rowLen = 2;
        int row = 0, col = 0;
        for(File emoji : emojiList) {
            if(emoji.isFile()) {
                EmojiButton b = new EmojiButton(emoji);
                buttonList.add(b);
                GridBagConstraints c = new GridBagConstraints();
                c.gridx = col;
                c.gridy = row;
                c.weightx = 0.5;
                c.weighty = 0.5;
                emojiPanel.add(b,c);
                if(col < rowLen-1)
                    col++;
                else {
                    col = 0;
                    row++;
                }
            }
        }
    }
    
    // Change to next screen
    private void changeCard() {
        CardLayout cl = (CardLayout) getContentPane().getLayout();
        cl.next(getContentPane());
    }
    

// *** Search Panel ********************************************************
    ArrayList<EmojiButton> buttonList;
    // Clear the search parameters from the text fields
    private void clearLastSearch() {
        hashtags.setText("");
        incKeywords.setText("");
        minTotalScore.setText("");
        maxTotalScore.setText("");
        buttonList.stream().forEach((b) -> {
            b.setSelected(false);
            });
        // Advanced Options
        excKeywords.setText("");
        minEmojiScore.setText("");
        maxEmojiScore.setText("");
        minTextScore.setText("");
        maxTextScore.setText("");
        // Clear any residual error message
        noResultsLabel.setVisible(false);
        errorLabel.setVisible(false);
        // Minimize the Advanced Search
        advToggle.setSelected(false);
        advSearchPanel.setPreferredSize(new Dimension());
        advSearchPanel.revalidate();
    }
    // Search and call to switch the screen
    private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) throws ParseException {//GEN-FIRST:event_searchButtonMouseClicked
        noResultsLabel.setVisible(false);
        errorLabel.setVisible(false);
        // Get the text from the text fields

        // (Set unused ints to -1)
        int unused = -1;

        String mainQuery;
        String totalSentimentQuery;
        String textOnlySentimentQuery;
        String emojiOnlySentimentQuery;

        // String Builder variables for formating the actual query
        StringBuilder mainQueryBuilder = new StringBuilder();
        StringBuilder totalSentimentScoreBuilder = new StringBuilder();
        StringBuilder onlyTextSentimentScoreBuilder = new StringBuilder();
        StringBuilder onlyEmojiSentimentScoreBuilder = new StringBuilder();

        // resetting the builders
        totalSentimentScoreBuilder.delete(0, totalSentimentScoreBuilder.length());
        onlyTextSentimentScoreBuilder.delete(0, onlyTextSentimentScoreBuilder.length());
        onlyEmojiSentimentScoreBuilder.delete(0, onlyEmojiSentimentScoreBuilder.length());

    /*
    * The following Blocks will format the hash tags and keywords        
    */
        if (!hashtags.getText().isEmpty())
        {
            String[] hashtagList = hashtags.getText().split(" ");
            for (String hashtagList1 : hashtagList) {
                mainQueryBuilder.append("+#").append(hashtagList1).append(" ");        	
            }
        }

        if (!incKeywords.getText().isEmpty())
        {
            String[] incKeywordList = incKeywords.getText().split(" ");   
            for (String incKeywordList1 : incKeywordList) {
                mainQueryBuilder.append("+").append(incKeywordList1).append(" ");            	
            }
        }       

        if (!excKeywords.getText().isEmpty())
        {
            String[] excKeywordList = excKeywords.getText().split(" ");   
            for (String excKeywordList1 : excKeywordList) {
                mainQueryBuilder.append("-").append(excKeywordList1).append(" ");            	
            }
        }  

        System.out.println(mainQueryBuilder.toString());
    /*
    *  the following block will format the query for total sentiment, 
    *  text only and emoji only queries. 
    *  
    */
        double minTotal = -1, maxTotal = -1, minEmoji = -1, maxEmoji = -1, minText = -1, maxText = -1; 

    // formatting total sentiment score query
        if (!minTotalScore.getText().isEmpty())
        {
            try{
                minTotal = Double.parseDouble(minTotalScore.getText());
            }catch (NumberFormatException e) {
            errorLabel.setVisible(true);
            }
        }

        if (!maxTotalScore.getText().isEmpty())
        {
            try{
                maxTotal = Double.parseDouble(maxTotalScore.getText());        		
            }catch (NumberFormatException e) {
            errorLabel.setVisible(true);
            }
        }

    // formatting text sentiment score
        if (!minTextScore.getText().isEmpty())
        {
            try{
                minText = Double.parseDouble(minTextScore.getText());
            }catch (NumberFormatException e) {
            errorLabel.setVisible(true);
            }
        }

        if (!maxTextScore.getText().isEmpty())
        {
            try{
                maxText = Double.parseDouble(maxTextScore.getText());        		
            }catch (NumberFormatException e) {
            errorLabel.setVisible(true);
            }
        }

    // formatting emoji sentiment score
        if (!minEmojiScore.getText().isEmpty())
        {
            try{
                minEmoji = Double.parseDouble(minEmojiScore.getText());
            }catch (NumberFormatException e) {
            errorLabel.setVisible(true);
            }
        }

        if (!maxEmojiScore.getText().isEmpty())
        {
            try{
                maxEmoji = Double.parseDouble(maxEmojiScore.getText());        		
            }catch (NumberFormatException e) {
            errorLabel.setVisible(true);
            }
        }

        // Search and compile list of selected Emoji Buttons
        ArrayList selectedEmojis = new ArrayList<>();
        buttonList.stream().forEach((EmojiButton b) -> {
            if(b.isSelected()) {
                String[] result32 = b.getImgName().split("U");
                for(String r : result32) {
                    if (!r.isEmpty()) {
                        String results16 = UnicodeConverter.convert32to16(r.replace("+","0x"));
                        
                        for (int i = 0; i < results16.length(); i++) {
                            selectedEmojis.add(results16.charAt(i));
                        }
                    }
                }
            }
            });
        
        // Search if the input is all valid
        if(!errorLabel.isShowing()) {
            //mainQuery =hashTagBuilder.append(incKeywordBuilder).toString(); 
            mainQuery = mainQueryBuilder.toString(); 
            totalSentimentQuery = totalSentimentScoreBuilder.toString();
            textOnlySentimentQuery = onlyTextSentimentScoreBuilder.toString();
            emojiOnlySentimentQuery = onlyEmojiSentimentScoreBuilder.toString();

            simpleQueryObject.setMainQuery(mainQuery);
            simpleQueryObject.setMinTotalScore(minTotal);
            simpleQueryObject.setMaxTotalScore(maxTotal);
            simpleQueryObject.setMinTextScore(minText);
            simpleQueryObject.setMaxTextScore(maxText);
            simpleQueryObject.setMinEmojiScore(minEmoji);
            simpleQueryObject.setMaxEmojiScore(maxEmoji);
        	
            EmbeddedSearcher searchObject = new EmbeddedSearcher(simpleQueryObject);

            ArrayList<File> fileList = searchObject.initializeQueries();

            System.out.println(fileList.size());
            fileList.stream().forEach((file) -> {
                System.out.println(file.toString());
            });
        	
            // Change the screen if tweets exist, display "No Results" if not
            if ( fileList.size() > 0) {
                setTweetList(fileList);
                changeCard();
            } else {
                noResultsLabel.setVisible(true);
            }
        }
    }//GEN-LAST:event_searchButtonMouseClicked
    // Show Advanced Options
    private void advToggleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_advToggleMouseClicked
        if (advToggle.isSelected()) {
            advSearchPanel.setPreferredSize(new Dimension(345,130));
            advSearchPanel.revalidate();
        }
        else {
            advSearchPanel.setPreferredSize(new Dimension());
            advSearchPanel.revalidate();
        }
    }//GEN-LAST:event_advToggleMouseClicked

    
// *** Result Panel ********************************************************
    
    private ArrayList<File> tweetList; // list of files to be displayed
    private ArrayList<File> filteredList;
    
    private final int pageLen; // length of pages (number of tweets in a page)
    private int pageNum; // currently displayed page
    // Show last set of tweets
    private void previousButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previousButtonMouseClicked
        if (pageNum > 0) {
            pageNum--;
            UpdateDisplay();
        }
    }//GEN-LAST:event_previousButtonMouseClicked
    // Show desired set of tweets
    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        pageNum = pageSelect.getSelectedIndex();
        UpdateDisplay();
    }//GEN-LAST:event_goButtonActionPerformed
    // Show next set of tweets
    private void nextButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextButtonMouseClicked
        if ((pageNum+1) * pageLen < tweetList.size()) {
            pageNum++;
            UpdateDisplay();
        }
    }//GEN-LAST:event_nextButtonMouseClicked
    // Clear the search parameters and switch screen
    private void backToSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backToSearchMouseClicked
        clearLastSearch();
        changeCard();
    }//GEN-LAST:event_backToSearchMouseClicked
    
    private void pieChartButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pieChartButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_pieChartButtonMouseClicked

    private void clearFiltersButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearFiltersButtonMouseClicked
        setTweetList(tweetList);
    }//GEN-LAST:event_clearFiltersButtonMouseClicked
    
    // Set the list of tweet files and update the display to show them
    public void setTweetList(ArrayList<File> tweets) {
        // Set the tweet files to show
        tweetList = tweets;
        // Set the page dropdown to number of pages
        String[] pages = new String[(int)Math.ceil((double)tweetList.size()/pageLen)];
        for (int i = 0; i < Array.getLength(pages); i++) {
            pages[i] = Integer.toString(i+1);
        }
        pageSelect.setModel(new javax.swing.DefaultComboBoxModel<>(pages));
        
        UpdateDisplay();
    }
    // Display the tweets for the current page
    private void UpdateDisplay() {
        // clear panel of previous page (if applicable)
        tweetPanel.removeAll();
        
        try {
        // Iterate through the files, displaying the tweets
            for (int i = pageLen * pageNum; i < Integer.min((pageNum+1)*pageLen, tweetList.size());i++) {
                // Create Status Object from the file and add to panel
                String rawJSON = readFirstLine(tweetList.get(i));
                Status tweet = TwitterObjectFactory.createStatus(rawJSON);              
                TweetStatus stat = new TweetStatus(tweet);
                tweetPanel.add(stat);
            }
            // make changes visible
            tweetPanel.revalidate();
          // Exceptions if errors in getting tweets
        } catch (IOException ioe) {
            System.out.println("Failed to store tweets: " + ioe.getMessage());
        } catch (TwitterException te) {
            System.out.println("Failed to get timeline: " + te.getMessage());
            System.exit(-1);
        }
    }
    // Set the list of filtered tweet files and update the display to show them
        public void setFilteredList(ArrayList<File> tweets) {
        // Set the tweet files to show
        filteredList = tweets;
        // Set the page dropdown to number of pages
        String[] pages = new String[(int)Math.ceil((double)filteredList.size()/pageLen)];
        for (int i = 0; i < Array.getLength(pages); i++) {
            pages[i] = Integer.toString(i+1);
        }
        pageSelect.setModel(new javax.swing.DefaultComboBoxModel<>(pages));
        
        UpdateFilterDisplay();
    }
    // Display the tweets for the current page
    private void UpdateFilterDisplay() {
        // clear panel of previous page (if applicable)
        tweetPanel.removeAll();
        
        try {
        // Iterate through the files, displaying the tweets
            for (int i = pageLen * pageNum; i < Integer.min((pageNum+1)*pageLen, filteredList.size());i++) {
                // Create Status Object from the file and add to panel
                String rawJSON = readFirstLine(filteredList.get(i));
                Status tweet = TwitterObjectFactory.createStatus(rawJSON);              
                TweetStatus stat = new TweetStatus(tweet);
                tweetPanel.add(stat);
            }
            // make changes visible
            tweetPanel.revalidate();
          // Exceptions if errors in getting tweets
        } catch (IOException ioe) {
            System.out.println("Failed to store tweets: " + ioe.getMessage());
        } catch (TwitterException te) {
            System.out.println("Failed to get timeline: " + te.getMessage());
            System.exit(-1);
        }
    }
    
    // method to retrieve the tweets from the files (UTF-8 format)
    // Copyright 2007 Yusuke Yamamoto
    private static String readFirstLine(File fileName) throws IOException {
        FileInputStream fis = null;
        InputStreamReader isr = null;
        BufferedReader br = null;
        try {
            fis = new FileInputStream(fileName);
            isr = new InputStreamReader(fis, "UTF-8");
            br = new BufferedReader(isr);
            return br.readLine();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException ignore) {
                }
            }
            if (isr != null) {
                try {
                    isr.close();
                } catch (IOException ignore) {
                }
            }
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TotalSentimentLabel;
    private javax.swing.JPanel advSearchPanel;
    private javax.swing.JToggleButton advToggle;
    private javax.swing.JButton backToSearch;
    private javax.swing.JButton clearFiltersButton;
    private javax.swing.JPanel emojiPanel;
    private javax.swing.JScrollPane emojiScrollPane;
    private javax.swing.JLabel emojiSentimentLabel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel excKeywordLabel;
    private javax.swing.JTextField excKeywords;
    private javax.swing.JButton goButton;
    private javax.swing.JLabel hashtagLabel;
    private javax.swing.JTextField hashtags;
    private javax.swing.JTextField incKeywords;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel keywordLabel;
    private javax.swing.JTextField maxEmojiScore;
    private javax.swing.JTextField maxTextScore;
    private javax.swing.JTextField maxTotalScore;
    private javax.swing.JTextField minEmojiScore;
    private javax.swing.JTextField minTextScore;
    private javax.swing.JTextField minTotalScore;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel noResultsLabel;
    private javax.swing.JComboBox<String> pageSelect;
    private javax.swing.JButton pieChartButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JPanel resultPane;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JScrollPane searchScrollPane;
    private javax.swing.JLabel textSentimentLabel;
    private javax.swing.JLabel toLabel;
    private javax.swing.JLabel toLabel2;
    private javax.swing.JLabel toLabel3;
    private javax.swing.JPanel tweetPanel;
    // End of variables declaration//GEN-END:variables
}
