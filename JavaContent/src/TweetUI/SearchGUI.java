package displaytweets;

import java.awt.CardLayout;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Array;
import twitter4j.Status;
import twitter4j.TwitterException;
import twitter4j.TwitterObjectFactory;

/**
 *
 * @author Kenan
 */
public class SearchGUI extends javax.swing.JFrame {

    /**
     * Creates new form SearchGUI
     */
    public SearchGUI() {
        initComponents();
        
        // Results Variables
        pageLen = 10;
        pageNum = 0; // first page
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        incKeywords = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        keywordLabel = new javax.swing.JLabel();
        minTotalScore = new javax.swing.JTextField();
        TotalSentimentLabel = new javax.swing.JLabel();
        maxTotalScore = new javax.swing.JTextField();
        toLabel = new javax.swing.JLabel();
        advToggle = new javax.swing.JToggleButton();
        advSearchPanel = new javax.swing.JPanel();
        excKeywordLabel = new javax.swing.JLabel();
        excKeywords = new javax.swing.JTextField();
        emojiSentimentLabel = new javax.swing.JLabel();
        toLabel3 = new javax.swing.JLabel();
        minEmojiScore = new javax.swing.JTextField();
        maxEmojiScore = new javax.swing.JTextField();
        minTextScore = new javax.swing.JTextField();
        textSentimentLabel = new javax.swing.JLabel();
        maxTextScore = new javax.swing.JTextField();
        toLabel2 = new javax.swing.JLabel();
        hashtagLabel = new javax.swing.JLabel();
        hashtags = new javax.swing.JTextField();
        noResultsLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        resultPanel = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        goButton = new javax.swing.JButton();
        pageSelect = new javax.swing.JComboBox<>();
        nextButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tweetPanel = new javax.swing.JPanel();
        backToSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        searchButton.setText("Search");
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchButtonMouseClicked(evt);
            }
        });

        keywordLabel.setText("Keyword");

        TotalSentimentLabel.setText("Total Sentiment Score");
        TotalSentimentLabel.setToolTipText("To display only one score, fill only one box");

        toLabel.setText("to");

        advToggle.setText("Advanced Search");
        advToggle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                advToggleMouseClicked(evt);
            }
        });

        advSearchPanel.setPreferredSize(new java.awt.Dimension(345, 0));

        excKeywordLabel.setText("Keyword (Exclude)");

        emojiSentimentLabel.setText("Emoji Sentiment Score");
        emojiSentimentLabel.setToolTipText("To display only one score, fill only one box");

        toLabel3.setText("to");

        textSentimentLabel.setText("Text Sentiment Score");
        textSentimentLabel.setToolTipText("To display only one score, fill only one box");

        toLabel2.setText("to");

        javax.swing.GroupLayout advSearchPanelLayout = new javax.swing.GroupLayout(advSearchPanel);
        advSearchPanel.setLayout(advSearchPanelLayout);
        advSearchPanelLayout.setHorizontalGroup(
            advSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advSearchPanelLayout.createSequentialGroup()
                .addGroup(advSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(excKeywordLabel)
                    .addComponent(textSentimentLabel)
                    .addComponent(emojiSentimentLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(advSearchPanelLayout.createSequentialGroup()
                        .addComponent(minEmojiScore, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxEmojiScore, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(advSearchPanelLayout.createSequentialGroup()
                        .addComponent(minTextScore, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxTextScore, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(excKeywords, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        advSearchPanelLayout.setVerticalGroup(
            advSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advSearchPanelLayout.createSequentialGroup()
                .addGroup(advSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(excKeywordLabel)
                    .addComponent(excKeywords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(advSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textSentimentLabel)
                    .addComponent(minTextScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel2)
                    .addComponent(maxTextScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(advSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emojiSentimentLabel)
                    .addComponent(minEmojiScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel3)
                    .addComponent(maxEmojiScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        hashtagLabel.setText("Hashtags");

        noResultsLabel.setForeground(new java.awt.Color(255, 0, 0));
        noResultsLabel.setText("No Results!");
        noResultsLabel.setVisible(false);

        errorLabel.setForeground(new java.awt.Color(255, 51, 51));
        errorLabel.setText("Invalid Input!");
        errorLabel.setVisible(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(noResultsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errorLabel))
                    .addComponent(advSearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(advToggle)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(TotalSentimentLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(minTotalScore, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxTotalScore, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hashtagLabel)
                            .addComponent(keywordLabel))
                        .addGap(90, 90, 90)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(incKeywords, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hashtags, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(hashtagLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(hashtags, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(keywordLabel)
                    .addComponent(incKeywords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TotalSentimentLabel)
                    .addComponent(minTotalScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel)
                    .addComponent(maxTotalScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(advToggle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(advSearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(searchButton)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(noResultsLabel)
                        .addComponent(errorLabel)))
                .addGap(18, 18, 18))
        );

        jScrollPane1.setViewportView(jPanel2);

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addGap(0, 0, 0))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        getContentPane().add(searchPanel, "searchCard");

        backButton.setText("Back");
        backButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backButtonMouseClicked(evt);
            }
        });

        goButton.setText("Go");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextButtonMouseClicked(evt);
            }
        });

        tweetPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tweetPanel.setLayout(new javax.swing.BoxLayout(tweetPanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(tweetPanel);

        backToSearch.setText("Back to Search");
        backToSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backToSearchMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout resultPanelLayout = new javax.swing.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(resultPanelLayout.createSequentialGroup()
                        .addComponent(backButton)
                        .addGap(18, 18, 18)
                        .addComponent(pageSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(goButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                        .addComponent(backToSearch)
                        .addGap(18, 18, 18)
                        .addComponent(nextButton)))
                .addContainerGap())
        );
        resultPanelLayout.setVerticalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(goButton)
                    .addComponent(pageSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextButton)
                    .addComponent(backToSearch))
                .addContainerGap())
        );

        getContentPane().add(resultPanel, "resultCard");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Change to next screen
    private void changeCard() {
        CardLayout cl = (CardLayout) getContentPane().getLayout();
        cl.next(getContentPane());
    }
    

// *** Search Panel ********************************************************
    
    // Clear the search parameters from the text fields
    private void clearLastSearch() {
        hashtags.setText("");
        incKeywords.setText("");
        minTotalScore.setText("");
        maxTotalScore.setText("");
        // Advanced Options
        excKeywords.setText("");
        minEmojiScore.setText("");
        maxEmojiScore.setText("");
        minTextScore.setText("");
        maxTextScore.setText("");
        // Clear any residual error message
        noResultsLabel.setVisible(false);
        errorLabel.setVisible(false);
    }
    // Search and call to switch the screen
    private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseClicked
        noResultsLabel.setVisible(false);
        errorLabel.setVisible(false);
        // Get the text from the text fields
        
        // (Set unused ints to -1)
        int unused = -1;
        String[] hashtagList = hashtags.getText().split(" ");
        String[] incKeywordList = incKeywords.getText().split(" ");
        
        int minTotal, maxTotal, minEmoji, maxEmoji, minText, maxText; 
        if (!minTotalScore.getText().isEmpty()) {
            try {
                minTotal = Integer.parseInt(minTotalScore.getText());
            } catch (NumberFormatException e) {
                errorLabel.setVisible(true);
            }
        } else
            minTotal = unused;
        
        if (!maxTotalScore.getText().isEmpty()) {
            try {
                maxTotal = Integer.parseInt(maxTotalScore.getText());
            } catch (NumberFormatException e) {
                errorLabel.setVisible(true);
            }
        } else
            maxTotal = unused;
        
        // Advanced Options
        String[] excKeywordList = excKeywords.getText().split(" ");
        
        if (!minEmojiScore.getText().isEmpty()) {
            try {
                minEmoji = Integer.parseInt(minEmojiScore.getText());
            } catch (NumberFormatException e) {
                errorLabel.setVisible(true);
            }
        } else
            minEmoji = unused;
         
        if (!maxEmojiScore.getText().isEmpty()) {
            try {
                maxEmoji = Integer.parseInt(maxEmojiScore.getText());
            } catch (NumberFormatException e) {
                errorLabel.setVisible(true);
            } 
        } else
            maxEmoji = unused;
        
        if (!minTextScore.getText().isEmpty()) {
            try {
                minText = Integer.parseInt(minTextScore.getText());
            } catch (NumberFormatException e) {
                errorLabel.setVisible(true);
            }
        } else
            minText = unused;

        if (!maxTextScore.getText().isEmpty()) {
            try {
                maxText = Integer.parseInt(maxTextScore.getText());
            } catch (NumberFormatException e) {
                errorLabel.setVisible(true);
            }
        } else
            maxText = unused;
              
        // Search if the input is all valid
        if(!errorLabel.isShowing()) {
            
            ////// INSERT SEARCH CALL HERE

            /* PUT File List in this variable (however works)*/
            File[] tweetResults = new File("").listFiles();
            // Change the screen if tweets exist, display "No Results" if not
            try {
                Array.getLength(tweetResults);
                setTweetList(tweetResults);
                changeCard();
            } catch (NullPointerException e) {
                noResultsLabel.setVisible(true);
            }
        }
    }//GEN-LAST:event_searchButtonMouseClicked
    // Show Advanced Options
    private void advToggleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_advToggleMouseClicked
        if (advToggle.isSelected()) {
            advSearchPanel.setPreferredSize(new Dimension(345,130));
            advSearchPanel.revalidate();
        }
        else {
            advSearchPanel.setPreferredSize(new Dimension());
            advSearchPanel.revalidate();
        }
    }//GEN-LAST:event_advToggleMouseClicked

    
// *** Result Panel ********************************************************
    
    private File[] tweetList; // list of files to be displayed
    private final int pageLen; // length of pages (number of tweets in a page)
    private int pageNum; // currently displayed page
    // Show last set of tweets
    private void backButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseClicked
        if (pageNum > 0) {
            pageNum--;
            UpdateDisplay();
        }
    }//GEN-LAST:event_backButtonMouseClicked
    // Show desired set of tweets
    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        pageNum = pageSelect.getSelectedIndex();
        UpdateDisplay();
    }//GEN-LAST:event_goButtonActionPerformed
    // Show next set of tweets
    private void nextButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextButtonMouseClicked
        if ((pageNum+1) * pageLen < Array.getLength(tweetList)) {
            pageNum++;
            UpdateDisplay();
        }
    }//GEN-LAST:event_nextButtonMouseClicked
    // Clear the search parameters and switch screen
    private void backToSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backToSearchMouseClicked
        clearLastSearch();
        changeCard();
    }//GEN-LAST:event_backToSearchMouseClicked
    // Set the list of tweet files and update the display to show them
    public void setTweetList(File [] tweets) {
        // Set the tweet files to show
        tweetList = tweets;
        // Set the page dropdown to number of pages
        String[] pages = new String[(int)Math.ceil((double)Array.getLength(tweetList)/pageLen)];
        for (int i = 0; i < Array.getLength(pages); i++) {
            pages[i] = Integer.toString(i+1);
        }
        pageSelect.setModel(new javax.swing.DefaultComboBoxModel<>(pages));
        
        UpdateDisplay();
    }
    // Display the tweets for the current page
    private void UpdateDisplay() {
        // clear panel of previous page (if applicable)
        tweetPanel.removeAll();
        
        try {
        // Iterate through the files, displaying the tweets
            for (int i = pageLen * pageNum; i < Integer.min((pageNum+1)*pageLen, Array.getLength(tweetList));i++) {
                // Create Status Object from the file and add to panel
                String rawJSON = readFirstLine(tweetList[i]);
                Status tweet = TwitterObjectFactory.createStatus(rawJSON);              
                TweetStatus stat = new TweetStatus(tweet);
                tweetPanel.add(stat);
            }
            // make changes visible
            tweetPanel.revalidate();
          // Exceptions if errors in getting tweets
        } catch (IOException ioe) {
            System.out.println("Failed to store tweets: " + ioe.getMessage());
        } catch (TwitterException te) {
            System.out.println("Failed to get timeline: " + te.getMessage());
            System.exit(-1);
        }
    }
    
    // method to retrieve the tweets from the files (UTF-8 format)
    // Copyright 2007 Yusuke Yamamoto
    private static String readFirstLine(File fileName) throws IOException {
        FileInputStream fis = null;
        InputStreamReader isr = null;
        BufferedReader br = null;
        try {
            fis = new FileInputStream(fileName);
            isr = new InputStreamReader(fis, "UTF-8");
            br = new BufferedReader(isr);
            return br.readLine();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException ignore) {
                }
            }
            if (isr != null) {
                try {
                    isr.close();
                } catch (IOException ignore) {
                }
            }
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TotalSentimentLabel;
    private javax.swing.JPanel advSearchPanel;
    private javax.swing.JToggleButton advToggle;
    private javax.swing.JButton backButton;
    private javax.swing.JButton backToSearch;
    private javax.swing.JLabel emojiSentimentLabel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel excKeywordLabel;
    private javax.swing.JTextField excKeywords;
    private javax.swing.JButton goButton;
    private javax.swing.JLabel hashtagLabel;
    private javax.swing.JTextField hashtags;
    private javax.swing.JTextField incKeywords;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel keywordLabel;
    private javax.swing.JTextField maxEmojiScore;
    private javax.swing.JTextField maxTextScore;
    private javax.swing.JTextField maxTotalScore;
    private javax.swing.JTextField minEmojiScore;
    private javax.swing.JTextField minTextScore;
    private javax.swing.JTextField minTotalScore;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel noResultsLabel;
    private javax.swing.JComboBox<String> pageSelect;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JLabel textSentimentLabel;
    private javax.swing.JLabel toLabel;
    private javax.swing.JLabel toLabel2;
    private javax.swing.JLabel toLabel3;
    private javax.swing.JPanel tweetPanel;
    // End of variables declaration//GEN-END:variables
}
